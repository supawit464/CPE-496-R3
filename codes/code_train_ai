import cv2
import time
from ultralytics import YOLO
import torch

# -------------------------------
# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• YOLO
# -------------------------------
custom_model_path = "./runs/detect/PROJECT/weights/best.pt"

try:
    model = YOLO(custom_model_path)
    print(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• custom ‡∏à‡∏≤‡∏Å {custom_model_path} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
except Exception as e:
    print(f"‚ùå ‡πÇ‡∏´‡∏•‡∏î custom model ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
    print("‚ö° ‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏• pretrained yolov8n.pt ‡πÅ‡∏ó‡∏ô")
    model = YOLO("yolov8n.pt")

# -------------------------------
# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏•‡∏≤‡∏™‡∏ó‡∏µ‡πà‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ "‡∏î‡∏µ" ‡πÅ‡∏•‡∏∞ "‡πÑ‡∏°‡πà‡∏î‡∏µ"
# -------------------------------
GOOD_CLASSES = {"Spinach-Ready-to-Harvest", "spring onion", "sunflower"}
BAD_CLASSES = {"dead sunflower", "Spinach-Diseased"}

# -------------------------------
# ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î input
# -------------------------------
print("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î:")
print("1: Webcam")
print("2: Video file")
choice = input("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (1/2): ")

if choice == "1":
    cap = cv2.VideoCapture(0)  # ‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á
    is_webcam = True
elif choice == "2":
    path = input("‡πÉ‡∏™‡πà path ‡∏Ç‡∏≠‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠: ")
    cap = cv2.VideoCapture(path)  # ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
    is_webcam = False
else:
    print("‚ùå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    exit()

if not cap.isOpened():
    print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á/‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÑ‡∏î‡πâ")
    exit()

# -------------------------------
# loop ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• real-time
# -------------------------------
while True:
    ret, frame = cap.read()
    if not ret:
        if not is_webcam:  
            # üîÅ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ ‚Üí ‡∏ß‡∏ô‡∏•‡∏π‡∏õ
            print("üîÅ ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏à‡∏ö ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà...")
            cap.set(cv2.CAP_PROP_POS_FRAMES, 0)
            continue
        else:
            print("‚ùå ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏õ‡∏¥‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ")
            break

    # üîπ ‡∏¢‡πà‡∏≠‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏ü‡∏£‡∏° (‡∏õ‡∏£‡∏±‡∏ö resolution ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà)
    frame = cv2.resize(frame, (640, 540))  # 640x540 ‡∏û‡∏≠‡∏î‡∏µ‡∏à‡∏≠‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ

    # ‡∏£‡∏±‡∏ô YOLO ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
    results = model(frame, stream=True)

    # ‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö
    good_count, bad_count = 0, 0

    for r in results:
        for box in r.boxes:
            cls_id = int(box.cls[0])
            class_name = model.names.get(cls_id, "unknown")

            # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏î‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏î‡∏µ
            if class_name in GOOD_CLASSES:
                good_count += 1
                color = (0, 255, 0)  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
            elif class_name in BAD_CLASSES:
                bad_count += 1
                color = (0, 0, 255)  # ‡πÅ‡∏î‡∏á
            else:
                color = (255, 255, 255)

            # ‡∏ß‡∏≤‡∏î‡∏Å‡∏•‡πà‡∏≠‡∏á
            x1, y1, x2, y2 = map(int, box.xyxy[0])
            cv2.rectangle(frame, (x1, y1), (x2, y2), color, 2)
            cv2.putText(frame, class_name, (x1, y1 - 10),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.6, color, 2)

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏∏‡∏°‡∏à‡∏≠
    cv2.putText(frame, f"GOOD: {good_count}", (20, 40),
                cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 3)
    cv2.putText(frame, f"BAD: {bad_count}", (20, 80),
                cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 3)

    cv2.imshow("YOLO Detection", frame)

    # ‡∏Å‡∏î q ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
print("‚úÖ ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß")
